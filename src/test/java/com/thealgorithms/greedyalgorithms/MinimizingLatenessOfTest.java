// ********RoostGPT********
/*
Test generated by RoostGPT for test Java-repo-test using AI Type Open AI and AI Model gpt-4
ROOST_METHOD_HASH=of_eb8138c6bc
ROOST_METHOD_SIG_HASH=of_7a04d5363c
"""
  Scenario 1: Valid job creation
  Details:
    TestName: testValidJobCreation
    Description: This test is designed to validate whether the 'of' method can successfully create a Job object when supplied with valid parameters.
  Execution:
    Arrange: Create a string 'jobName', an int 'processingTime', and an int 'deadline' with valid data.
    Act: Invoke the 'of' method with the created parameters.
    Assert: Use JUnit assertions to ensure that the returned Job object is not null and the values of its attributes match the provided parameters.
  Validation:
    This test aims to verify the basic functionality of the 'of' method. The expected result is a Job object with the specified attributes, which confirms that the 'of' method works as intended.
  Scenario 2: Job creation with null job name
  Details:
    TestName: testJobCreationWithNullName
    Description: This test is designed to check how the 'of' method handles a null jobName.
  Execution:
    Arrange: Create a null string 'jobName', an int 'processingTime', and an int 'deadline'.
    Act: Invoke the 'of' method with the created parameters.
    Assert: Use JUnit assertions to check if an appropriate exception is thrown.
  Validation:
    This test aims to verify the 'of' method's error handling when a null jobName is provided. The expected result is an exception since a null jobName is not valid.
  Scenario 3: Job creation with negative processing time
  Details:
    TestName: testJobCreationWithNegativeProcessingTime
    Description: This test is designed to check how the 'of' method handles a negative processing time.
  Execution:
    Arrange: Create a string 'jobName', a negative int 'processingTime', and an int 'deadline'.
    Act: Invoke the 'of' method with the created parameters.
    Assert: Use JUnit assertions to check if an appropriate exception is thrown.
  Validation:
    This test aims to verify the 'of' method's error handling when a negative processing time is provided. The expected result is an exception since a negative processing time is not valid.
  Scenario 4: Job creation with negative deadline
  Details:
    TestName: testJobCreationWithNegativeDeadline
    Description: This test is designed to check how the 'of' method handles a negative deadline.
  Execution:
    Arrange: Create a string 'jobName', an int 'processingTime', and a negative int 'deadline'.
    Act: Invoke the 'of' method with the created parameters.
    Assert: Use JUnit assertions to check if an appropriate exception is thrown.
  Validation:
    This test aims to verify the 'of' method's error handling when a negative deadline is provided. The expected result is an exception since a negative deadline is not valid.
"""
*/
// ********RoostGPT********
package com.thealgorithms.greedyalgorithms;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;
import org.junit.jupiter.api.*;

@Tag("com.thealgorithms.greedyalgorithms")
@Tag("com.thealgorithms.greedyalgorithms.of")
public class MinimizingLatenessOfTest {

	@Test
	public void testValidJobCreation() {
		String jobName = "Job1";
		int processingTime = 5;
		int deadline = 10;
		Job result = Job.of(jobName, processingTime, deadline);
		assertNotNull(result, "Job object should not be null");
		assertEquals(jobName, result.getJobName(), "Job name should match the provided value");
		assertEquals(processingTime, result.getProcessingTime(), "Processing time should match the provided value");
		assertEquals(deadline, result.getDeadline(), "Deadline should match the provided value");
	}

	@Test
	public void testJobCreationWithNullName() {
		String jobName = null;
		int processingTime = 5;
		int deadline = 10;
		assertThrows(IllegalArgumentException.class, () -> Job.of(jobName, processingTime, deadline),
				"Exception should be thrown when job name is null");
	}

	@Test
	public void testJobCreationWithNegativeProcessingTime() {
		String jobName = "Job1";
		int processingTime = -5;
		int deadline = 10;
		assertThrows(IllegalArgumentException.class, () -> Job.of(jobName, processingTime, deadline),
				"Exception should be thrown when processing time is negative");
	}

	@Test
	public void testJobCreationWithNegativeDeadline() {
		String jobName = "Job1";
		int processingTime = 5;
		int deadline = -10;
		assertThrows(IllegalArgumentException.class, () -> Job.of(jobName, processingTime, deadline),
				"Exception should be thrown when deadline is negative");
	}

}