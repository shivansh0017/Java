// ********RoostGPT********
/*
Test generated by RoostGPT for test Java-repo-test using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=of_eb8138c6bc
ROOST_METHOD_SIG_HASH=of_7a04d5363c

"""
  Scenario 1: Valid job creation

  Details:  
    TestName: testValidJobCreation
    Description: This test is designed to validate whether the 'of' method can successfully create a Job object when supplied with valid parameters. 
  Execution:
    Arrange: Provide a valid job name, processing time, and deadline.
    Act: Invoke the 'of' method with the arranged parameters.
    Assert: Check if the returned Job object is not null and if the jobName, processingTime, and deadline match the provided values. 
  Validation: 
    This test ensures that a Job can be properly created with the 'of' method when valid parameters are provided. It validates the primary functionality of the method.

  Scenario 2: Job creation with null jobName

  Details:  
    TestName: testJobCreationWithNullName
    Description: This test checks the behavior of the 'of' method when a null jobName is provided. 
  Execution:
    Arrange: Set the jobName as null, and provide valid values for processing time and deadline.
    Act: Invoke the 'of' method with the arranged parameters.
    Assert: Check if the returned Job object is null or if an exception is thrown.
  Validation: 
    This test ensures that the 'of' method correctly handles null values for the jobName parameter. This is critical for preventing null pointer exceptions.

  Scenario 3: Job creation with negative processing time

  Details:  
    TestName: testJobCreationWithNegativeProcessingTime
    Description: This test checks the behavior of the 'of' method when a negative processing time is provided.
  Execution:
    Arrange: Provide a valid jobName, set processing time as a negative value, and provide a valid deadline.
    Act: Invoke the 'of' method with the arranged parameters.
    Assert: Check if the returned Job object is null or if an exception is thrown.
  Validation: 
    This test ensures that the 'of' method correctly handles negative values for the processingTime parameter. This is critical for maintaining data integrity.

  Scenario 4: Job creation with negative deadline

  Details:  
    TestName: testJobCreationWithNegativeDeadline
    Description: This test checks the behavior of the 'of' method when a negative deadline is provided.
  Execution:
    Arrange: Provide a valid jobName, a valid processing time, and set deadline as a negative value.
    Act: Invoke the 'of' method with the arranged parameters.
    Assert: Check if the returned Job object is null or if an exception is thrown.
  Validation: 
    This test ensures that the 'of' method correctly handles negative values for the deadline parameter. This is critical for maintaining data integrity. 

  Scenario 5: Job creation with processing time exceeding deadline

  Details:  
    TestName: testJobCreationWithProcessingTimeExceedingDeadline
    Description: This test checks the behavior of the 'of' method when the processing time exceeds the deadline.
  Execution:
    Arrange: Provide a valid jobName, set the processing time to a value higher than the deadline, and provide a valid deadline.
    Act: Invoke the 'of' method with the arranged parameters.
    Assert: Check if the returned Job object is null, or if an exception is thrown, or if the processing time is adjusted to meet the deadline.
  Validation: 
    This test ensures that the 'of' method correctly handles scenarios where the processing time exceeds the deadline. This is critical for ensuring the consistency of job scheduling logic. 
"""
*/

// ********RoostGPT********
package com.thealgorithms.greedyalgorithms;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;

public class MinimizingLatenessOfTest {
    @Test
    public void testValidJobCreation() {
        String jobName = "Job1";
        int processingTime = 5;
        int deadline = 10;
        
        Job job = Job.of(jobName, processingTime, deadline);
        
        assertNotNull(job);
        assertEquals(jobName, job.getJobName());
        assertEquals(processingTime, job.getProcessingTime());
        assertEquals(deadline, job.getDeadline());
    }
    @Test
    public void testJobCreationWithNullName() {
        String jobName = null;
        int processingTime = 5;
        int deadline = 10;
        
        assertThrows(IllegalArgumentException.class, () -> {
            Job.of(jobName, processingTime, deadline);
        });
    }
    @Test
    public void testJobCreationWithNegativeProcessingTime() {
        String jobName = "Job1";
        int processingTime = -5;
        int deadline = 10;
        
        assertThrows(IllegalArgumentException.class, () -> {
            Job.of(jobName, processingTime, deadline);
        });
    }
    @Test
    public void testJobCreationWithNegativeDeadline() {
        String jobName = "Job1";
        int processingTime = 5;
        int deadline = -10;
        
        assertThrows(IllegalArgumentException.class, () -> {
            Job.of(jobName, processingTime, deadline);
        });
    }
    @Test
    public void testJobCreationWithProcessingTimeExceedingDeadline() {
        String jobName = "Job1";
        int processingTime = 15;
        int deadline = 10;
        
        assertThrows(IllegalArgumentException.class, () -> {
            Job.of(jobName, processingTime, deadline);
        });
    }
}
