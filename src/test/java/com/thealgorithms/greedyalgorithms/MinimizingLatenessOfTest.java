// ********RoostGPT********
/*
Test generated by RoostGPT for test Java-repo-test-databricks using AI Type DBRX and AI Model meta-llama-3-70b-instruct-041824

ROOST_METHOD_HASH=of_eb8138c6bc
ROOST_METHOD_SIG_HASH=of_7a04d5363c

Here are the generated test scenarios for the `of` method:

**Scenario 1: Successful Job Creation with Valid Parameters**

Details:
  TestName: validJobCreation
  Description: Verifies that a Job object is created successfully with valid parameters.

Execution:
  Arrange: None
  Act: `Job job = Job.of("Job1", 10, 20);`
  Assert: `assertNotNull(job);`

Validation:
  This assertion ensures that a non-null Job object is returned when valid parameters are passed to the `of` method. This test scenario verifies that the method correctly creates a Job object with the provided name, processing time, and deadline.

**Scenario 2: Null Job Name**

Details:
  TestName: nullJobName
  Description: Verifies that the `of` method throws a NullPointerException when the job name is null.

Execution:
  Arrange: None
  Act: `Job job = Job.of(null, 10, 20);`
  Assert: `expectedException.expect(NullPointerException.class);`

Validation:
  This test scenario ensures that the `of` method throws a NullPointerException when the job name is null, preventing the creation of a Job object with an invalid name.

**Scenario 3: Negative Processing Time**

Details:
  TestName: negativeProcessingTime
  Description: Verifies that the `of` method throws an IllegalArgumentException when the processing time is negative.

Execution:
  Arrange: None
  Act: `Job job = Job.of("Job1", -10, 20);`
  Assert: `expectedException.expect(IllegalArgumentException.class);`

Validation:
  This test scenario ensures that the `of` method throws an IllegalArgumentException when the processing time is negative, preventing the creation of a Job object with an invalid processing time.

**Scenario 4: Negative Deadline**

Details:
  TestName: negativeDeadline
  Description: Verifies that the `of` method throws an IllegalArgumentException when the deadline is negative.

Execution:
  Arrange: None
  Act: `Job job = Job.of("Job1", 10, -20);`
  Assert: `expectedException.expect(IllegalArgumentException.class);`

Validation:
  This test scenario ensures that the `of` method throws an IllegalArgumentException when the deadline is negative, preventing the creation of a Job object with an invalid deadline.

**Scenario 5: Zero Processing Time**

Details:
  TestName: zeroProcessingTime
  Description: Verifies that the `of` method creates a Job object with a processing time of zero.

Execution:
  Arrange: None
  Act: `Job job = Job.of("Job1", 0, 20);`
  Assert: `assertNotNull(job);`

Validation:
  This test scenario ensures that the `of` method correctly creates a Job object with a processing time of zero, which is a valid scenario.

**Scenario 6: Zero Deadline**

Details:
  TestName: zeroDeadline
  Description: Verifies that the `of` method creates a Job object with a deadline of zero.

Execution:
  Arrange: None
  Act: `Job job = Job.of("Job1", 10, 0);`
  Assert: `assertNotNull(job);`

Validation:
  This test scenario ensures that the `of` method correctly creates a Job object with a deadline of zero, which is a valid scenario.

These test scenarios cover various edge cases and error handling scenarios for the `of` method, ensuring that it behaves as expected in different situations.
*/

// ********RoostGPT********
package com.thealgorithms.greedyalgorithms;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
// import org.mockito.junit.jupiter.MockitoExtension;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import java.util.Arrays;

// @ExtendWith(MockitoExtension.class) 
class MinimizingLatenessOfTest {
    @Test
    void validJobCreation() {
        // Act
        MinimizingLateness.Job job = MinimizingLateness.Job.of("Job1", 10, 20);
        // Assert
        assertNotNull(job);
    }
    @Test
    void nullJobName() {
        // Act and Assert
        NullPointerException exception = assertThrows(NullPointerException.class, () -> MinimizingLateness.Job.of(null, 10, 20));
    }
    @Test
    void negativeProcessingTime() {
        // Act and Assert
        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> MinimizingLateness.Job.of("Job1", -10, 20));
    }
    @Test
    void negativeDeadline() {
        // Act and Assert
        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> MinimizingLateness.Job.of("Job1", 10, -20));
    }
    @Test
    void zeroProcessingTime() {
        // Act
        MinimizingLateness.Job job = MinimizingLateness.Job.of("Job1", 0, 20);
        // Assert
        assertNotNull(job);
    }
    @Test
    void zeroDeadline() {
        // Act
        MinimizingLateness.Job job = MinimizingLateness.Job.of("Job1", 10, 0);
        // Assert
        assertNotNull(job);
    }
    // Add a comment here: The business logic for the function needs to be improved to handle the case where processingTime is greater than deadline.
    // Add a test case for this scenario
    @Test
    void processingTimeGreaterThanDeadline() {
        // Act and Assert
        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> MinimizingLateness.Job.of("Job1", 20, 10));
    }
}
