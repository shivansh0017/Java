// ********RoostGPT********
/*
Test generated by RoostGPT for test Java-repo-test using AI Type Open AI and AI Model gpt-4
ROOST_METHOD_HASH=of_eb8138c6bc
ROOST_METHOD_SIG_HASH=of_7a04d5363c
"""
  Scenario 1: Valid job creation
  Details:
    TestName: testValidJobCreation
    Description: This test is designed to validate whether the 'of' method can successfully create a Job object when supplied with valid parameters.
  Execution:
    Arrange: Create a string 'jobName', an int 'processingTime', and an int 'deadline' with valid data.
    Act: Invoke the 'of' method with the created parameters.
    Assert: Use JUnit assertions to ensure that the returned Job object is not null and the values of jobName, processingTime, and deadline are as expected.
  Validation:
    This assertion verifies that the 'of' method can successfully create a Job object with the supplied parameters. This test is critical as it confirms the method's basic functionality.
  Scenario 2: Null jobName
  Details:
    TestName: testNullJobName
    Description: This test is meant to check if the 'of' method can handle a null jobName parameter gracefully.
  Execution:
    Arrange: Create a null string 'jobName', an int 'processingTime', and an int 'deadline' with valid data.
    Act: Invoke the 'of' method with the created parameters.
    Assert: Use JUnit assertions to ensure that the returned Job object is either null or an appropriate exception is thrown.
  Validation:
    This assertion aims to verify that the 'of' method can handle null inputs without crashing the application. This test is significant as it checks the method's robustness in handling invalid inputs.
  Scenario 3: Negative processingTime
  Details:
    TestName: testNegativeProcessingTime
    Description: This test is designed to check if the 'of' method can appropriately handle a negative 'processingTime' parameter.
  Execution:
    Arrange: Create a string 'jobName', a negative int 'processingTime', and an int 'deadline' with valid data.
    Act: Invoke the 'of' method with the created parameters.
    Assert: Use JUnit assertions to ensure that the returned Job object is either null or an appropriate exception is thrown.
  Validation:
    This assertion verifies that the 'of' method can handle negative integers without crashing the application. This test is important as it checks the method's capability to handle invalid inputs.
  Scenario 4: Negative deadline
  Details:
    TestName: testNegativeDeadline
    Description: This test is meant to check if the 'of' method can successfully handle a negative 'deadline' parameter.
  Execution:
    Arrange: Create a string 'jobName', an int 'processingTime', and a negative int 'deadline' with valid data.
    Act: Invoke the 'of' method with the created parameters.
    Assert: Use JUnit assertions to ensure that the returned Job object is either null or an appropriate exception is thrown.
  Validation:
    This assertion aims to verify that the 'of' method can handle negative integers without crashing the application. This test is significant as it checks the method's robustness in handling invalid inputs.
"""
*/
// ********RoostGPT********
package com.thealgorithms.greedyalgorithms;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;
import org.junit.jupiter.api.*;

@Tag("com.thealgorithms.greedyalgorithms")
@Tag("com.thealgorithms.greedyalgorithms.of")
public class MinimizingLatenessOfTest {

	@Test
	public void testValidJobCreation() {
		String jobName = "Job1";
		int processingTime = 10;
		int deadline = 20;
		Job actualJob = Job.of(jobName, processingTime, deadline);
		assertNotNull(actualJob);
		assertEquals(jobName, actualJob.getJobName());
		assertEquals(processingTime, actualJob.getProcessingTime());
		assertEquals(deadline, actualJob.getDeadline());
	}

	@Test
	public void testNullJobName() {
		String jobName = null;
		int processingTime = 10;
		int deadline = 20;
		Exception exception = assertThrows(IllegalArgumentException.class, () -> {
			Job.of(jobName, processingTime, deadline);
		});
		String expectedMessage = "Job name cannot be null";
		String actualMessage = exception.getMessage();
		assertTrue(actualMessage.contains(expectedMessage));
	}

	@Test
	public void testNegativeProcessingTime() {
		String jobName = "Job1";
		int processingTime = -10;
		int deadline = 20;
		Exception exception = assertThrows(IllegalArgumentException.class, () -> {
			Job.of(jobName, processingTime, deadline);
		});
		String expectedMessage = "Processing time cannot be negative";
		String actualMessage = exception.getMessage();
		assertTrue(actualMessage.contains(expectedMessage));
	}

	@Test
	public void testNegativeDeadline() {
		String jobName = "Job1";
		int processingTime = 10;
		int deadline = -20;
		Exception exception = assertThrows(IllegalArgumentException.class, () -> {
			Job.of(jobName, processingTime, deadline);
		});
		String expectedMessage = "Deadline cannot be negative";
		String actualMessage = exception.getMessage();
		assertTrue(actualMessage.contains(expectedMessage));
	}

}