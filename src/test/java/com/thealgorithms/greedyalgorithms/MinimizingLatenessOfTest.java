// ********RoostGPT********
/*
Test generated by RoostGPT for test Java-repo-test using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=of_eb8138c6bc
ROOST_METHOD_SIG_HASH=of_7a04d5363c

"""
  Scenario 1: Valid job creation

  Details:  
    TestName: testValidJobCreation
    Description: This test is designed to validate whether the 'of' method can successfully create a Job object when supplied with valid parameters. 
  Execution:
    Arrange: Define a valid jobName, processingTime, and deadline.
    Act: Invoke the 'of' method with the specified parameters.
    Assert: Check if the returned Job object is not null and if the jobName, processingTime, and deadline match the provided values. 
  Validation: 
    This test ensures that a Job object can be created successfully with valid inputs. The expected result is based on the assumption that the 'of' method should return a Job object with the same values as the input parameters.

  Scenario 2: Job creation with null jobName

  Details:  
    TestName: testJobCreationWithNullJobName
    Description: This test checks the behavior of the 'of' method when the jobName parameter is null. 
  Execution:
    Arrange: Define a null jobName, and valid processingTime and deadline.
    Act: Invoke the 'of' method with the specified parameters.
    Assert: Check if the returned Job object is null or if an exception is thrown.
  Validation: 
    This test validates the robustness of the 'of' method against null inputs. The expected outcome is based on the assumption that the 'of' method should either return null or throw an exception when jobName is null.

  Scenario 3: Job creation with negative processingTime

  Details:  
    TestName: testJobCreationWithNegativeProcessingTime
    Description: This test checks the behavior of the 'of' method when the processingTime parameter is negative. 
  Execution:
    Arrange: Define a valid jobName, a negative processingTime, and a valid deadline.
    Act: Invoke the 'of' method with the specified parameters.
    Assert: Check if the returned Job object is null or if an exception is thrown.
  Validation: 
    This test validates the 'of' method's handling of invalid processingTime inputs. The expected result is based on the assumption that the 'of' method should either return null or throw an exception when processingTime is negative.

  Scenario 4: Job creation with negative deadline

  Details:  
    TestName: testJobCreationWithNegativeDeadline
    Description: This test checks the behavior of the 'of' method when the deadline parameter is negative. 
  Execution:
    Arrange: Define a valid jobName, a valid processingTime, and a negative deadline.
    Act: Invoke the 'of' method with the specified parameters.
    Assert: Check if the returned Job object is null or if an exception is thrown.
  Validation: 
    This test validates the 'of' method's handling of invalid deadline inputs. The expected result is based on the assumption that the 'of' method should either return null or throw an exception when deadline is negative.
"""
*/

// ********RoostGPT********
package com.thealgorithms.greedyalgorithms;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;

public class MinimizingLatenessOfTest {
    @Test
    public void testValidJobCreation() {
        String jobName = "Job1";
        int processingTime = 5;
        int deadline = 10;
        Job job = Job.of(jobName, processingTime, deadline);
        assertNotNull(job);
        assertEquals(jobName, job.getJobName());
        assertEquals(processingTime, job.getProcessingTime());
        assertEquals(deadline, job.getDeadline());
    }
    @Test
    public void testJobCreationWithNullJobName() {
        String jobName = null;
        int processingTime = 5;
        int deadline = 10;
        // the jobName is null, so it should throw NullPointerException
        assertThrows(NullPointerException.class, () -> {
            Job job = Job.of(jobName, processingTime, deadline);
        });
    }
    @Test
    public void testJobCreationWithNegativeProcessingTime() {
        String jobName = "Job1";
        int processingTime = -5;
        int deadline = 10;
        // the processingTime is negative, so it should throw IllegalArgumentException
        assertThrows(IllegalArgumentException.class, () -> {
            Job job = Job.of(jobName, processingTime, deadline);
        });
    }
    @Test
    public void testJobCreationWithNegativeDeadline() {
        String jobName = "Job1";
        int processingTime = 5;
        int deadline = -10;
        // the deadline is negative, so it should throw IllegalArgumentException
        assertThrows(IllegalArgumentException.class, () -> {
            Job job = Job.of(jobName, processingTime, deadline);
        });
    }
}
