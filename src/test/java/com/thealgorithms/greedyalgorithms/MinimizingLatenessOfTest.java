// ********RoostGPT********
/*
Test generated by RoostGPT for test Java-repo-Claude-test using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=of_eb8138c6bc
ROOST_METHOD_SIG_HASH=of_7a04d5363c

Here are some JUnit test scenarios for the provided `of` method:

Scenario 1: Valid Job Creation

Details:  
  TestName: validJobCreation
  Description: This test checks if the `of` method creates a valid `Job` object with the provided parameters.
Execution:
  Arrange: Prepare valid input parameters for the `of` method.
  Act: Invoke the `of` method with the prepared parameters.
  Assert: Use JUnit assertions to verify that the returned `Job` object has the expected `jobName`, `processingTime`, and `deadline` values.
Validation:
  The assertion verifies that the `of` method correctly initializes a `Job` object with the provided parameters.
  This test ensures that the `of` method behaves as expected when given valid input.

Scenario 2: Job Creation with Empty Job Name

Details:
  TestName: jobCreationWithEmptyJobName
  Description: This test checks if the `of` method handles the case when an empty string is provided as the `jobName` parameter.
Execution:
  Arrange: Prepare input parameters with an empty string for `jobName` and valid values for `processingTime` and `deadline`.
  Act: Invoke the `of` method with the prepared parameters.
  Assert: Use JUnit assertions to verify that the returned `Job` object has an empty string for `jobName` and the expected `processingTime` and `deadline` values.
Validation:
  The assertion verifies that the `of` method allows the creation of a `Job` object with an empty `jobName`.
  This test ensures that the `of` method does not throw an exception or have unexpected behavior when given an empty `jobName`.

Scenario 3: Job Creation with Negative Processing Time

Details:
  TestName: jobCreationWithNegativeProcessingTime
  Description: This test checks if the `of` method handles the case when a negative value is provided for the `processingTime` parameter.
Execution:
  Arrange: Prepare input parameters with a valid `jobName`, a negative value for `processingTime`, and a valid `deadline`.
  Act: Invoke the `of` method with the prepared parameters.
  Assert: Use JUnit assertions to verify that the returned `Job` object has the expected `jobName` and `deadline` values, and the `processingTime` is set to 0 (assuming negative processing time is treated as 0).
Validation:
  The assertion verifies that the `of` method handles negative `processingTime` values gracefully by setting it to 0.
  This test ensures that the `of` method does not throw an exception or have unexpected behavior when given a negative `processingTime`.

Scenario 4: Job Creation with Negative Deadline

Details:
  TestName: jobCreationWithNegativeDeadline
  Description: This test checks if the `of` method handles the case when a negative value is provided for the `deadline` parameter.
Execution:
  Arrange: Prepare input parameters with a valid `jobName`, a valid `processingTime`, and a negative value for `deadline`.
  Act: Invoke the `of` method with the prepared parameters.
  Assert: Use JUnit assertions to verify that the returned `Job` object has the expected `jobName` and `processingTime` values, and the `deadline` is set to 0 (assuming negative deadline is treated as 0).
Validation:
  The assertion verifies that the `of` method handles negative `deadline` values gracefully by setting it to 0.
  This test ensures that the `of` method does not throw an exception or have unexpected behavior when given a negative `deadline`.

Scenario 5: Job Creation with Large Processing Time and Deadline

Details:
  TestName: jobCreationWithLargeProcessingTimeAndDeadline
  Description: This test checks if the `of` method can handle large values for `processingTime` and `deadline` parameters.
Execution:
  Arrange: Prepare input parameters with a valid `jobName` and large values for `processingTime` and `deadline` (e.g., Integer.MAX_VALUE).
  Act: Invoke the `of` method with the prepared parameters.
  Assert: Use JUnit assertions to verify that the returned `Job` object has the expected `jobName`, `processingTime`, and `deadline` values.
Validation:
  The assertion verifies that the `of` method can handle large values for `processingTime` and `deadline` without any overflow or unexpected behavior.
  This test ensures that the `of` method is robust and can handle extreme values within the valid range of integers.

These test scenarios cover different aspects of the `of` method, including valid job creation, handling of empty job names, negative processing times and deadlines, and large values for processing time and deadline. They aim to ensure the correctness and robustness of the `of` method under various input conditions.
*/

// ********RoostGPT********
package com.thealgorithms.greedyalgorithms;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import java.util.stream.Stream;
import static org.assertj.core.api.Assertions.assertThat;
import java.util.Arrays;

class MinimizingLatenessOfTest {
    @Test
    void validJobCreation() {
        // Arrange
        String jobName = "Job1";
        int processingTime = 10;
        int deadline = 20;
        // Act
        Job job = MinimizingLatenessOf.of(jobName, processingTime, deadline);
        // Assert
        assertThat(job).isNotNull();
        assertThat(job.jobName).isEqualTo(jobName);
        assertThat(job.processingTime).isEqualTo(processingTime);
        assertThat(job.deadline).isEqualTo(deadline);
    }
    
    @Test
    void jobCreationWithEmptyJobName() {
        // Arrange
        String jobName = "";
        int processingTime = 10;
        int deadline = 20;
        // Act
        Job job = MinimizingLatenessOf.of(jobName, processingTime, deadline);
        // Assert
        assertThat(job).isNotNull();
        assertThat(job.jobName).isEmpty();
        assertThat(job.processingTime).isEqualTo(processingTime);
        assertThat(job.deadline).isEqualTo(deadline);
    }
    
    @Test
    void jobCreationWithNegativeProcessingTime() {
        // Arrange
        String jobName = "Job1";
        int processingTime = -10;
        int deadline = 20;
        // Act
        Job job = MinimizingLatenessOf.of(jobName, processingTime, deadline);
        // Assert
        assertThat(job).isNotNull();
        assertThat(job.jobName).isEqualTo(jobName);
        assertThat(job.processingTime).isZero();
        assertThat(job.deadline).isEqualTo(deadline);
    }
    
    @Test
    void jobCreationWithNegativeDeadline() {
        // Arrange
        String jobName = "Job1";
        int processingTime = 10;
        int deadline = -20;
        // Act
        Job job = MinimizingLatenessOf.of(jobName, processingTime, deadline);
        // Assert
        assertThat(job).isNotNull();
        assertThat(job.jobName).isEqualTo(jobName);
        assertThat(job.processingTime).isEqualTo(processingTime);
        assertThat(job.deadline).isZero();
    }
    
    @Test
    void jobCreationWithLargeProcessingTimeAndDeadline() {
        // Arrange
        String jobName = "Job1";
        int processingTime = Integer.MAX_VALUE;
        int deadline = Integer.MAX_VALUE;
        // Act
        Job job = MinimizingLatenessOf.of(jobName, processingTime, deadline);
        // Assert
        assertThat(job).isNotNull();
        assertThat(job.jobName).isEqualTo(jobName);
        assertThat(job.processingTime).isEqualTo(processingTime);
        assertThat(job.deadline).isEqualTo(deadline);
    }
    
    @ParameterizedTest
    @MethodSource("provideJobCreationScenarios")
    void testJobCreationScenarios(String jobName, int processingTime, int deadline, String expectedJobName, int expectedProcessingTime, int expectedDeadline) {
        // Act
        Job job = MinimizingLatenessOf.of(jobName, processingTime, deadline);
        // Assert
        assertThat(job).isNotNull();
        assertThat(job.jobName).isEqualTo(expectedJobName);
        assertThat(job.processingTime).isEqualTo(expectedProcessingTime);
        assertThat(job.deadline).isEqualTo(expectedDeadline);
    }
    
    private static Stream<Arguments> provideJobCreationScenarios() {
        return Stream.of(
            Arguments.of("Job1", 10, 20, "Job1", 10, 20),
            Arguments.of("", 10, 20, "", 10, 20),
            Arguments.of("Job1", -10, 20, "Job1", 0, 20),
            Arguments.of("Job1", 10, -20, "Job1", 10, 0),
            Arguments.of("Job1", Integer.MAX_VALUE, Integer.MAX_VALUE, "Job1", Integer.MAX_VALUE, Integer.MAX_VALUE)
        );
    }
}
