// ********RoostGPT********
/*
Test generated by RoostGPT for test Java-repo-test using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=of_eb8138c6bc
ROOST_METHOD_SIG_HASH=of_7a04d5363c

"""
Scenario 1: Validate Job Creation with Valid Parameters

Details:  
  TestName: validateJobCreationWithValidParameters
  Description: This test is meant to check if the Job object is created correctly when valid parameters are passed to the 'of' method. 
Execution:
  Arrange: Create a jobName string, processingTime, and deadline integers with valid values. 
  Act: Invoke the 'of' method with the created parameters. 
  Assert: Use JUnit assertions to compare the returned Job object's properties with the passed parameters.
Validation: 
  The assertion aims to verify if the 'of' method correctly creates a Job object with the passed parameters. The expected result is that the Job object's properties match the parameters passed to the 'of' method. 
  The significance of this test is to ensure that the 'of' method correctly creates Job objects, which is crucial for the application's proper functioning.


Scenario 2: Validate Job Creation with Null Job Name

Details:  
  TestName: validateJobCreationWithNullJobName
  Description: This test is meant to check if the 'of' method handles null jobName correctly. 
Execution:
  Arrange: Create a null jobName, and processingTime and deadline integers with valid values. 
  Act: Invoke the 'of' method with the created parameters. 
  Assert: Use JUnit assertions to check if the returned Job object's jobName is null.
Validation: 
  The assertion aims to verify if the 'of' method correctly handles null jobName. The expected result is that the Job object's jobName is null. 
  The significance of this test is to ensure that the 'of' method can handle null jobName, which is important for the application's robustness.


Scenario 3: Validate Job Creation with Negative Processing Time

Details:  
  TestName: validateJobCreationWithNegativeProcessingTime
  Description: This test is meant to check if the 'of' method handles negative processingTime correctly. 
Execution:
  Arrange: Create a jobName string with valid value, and processingTime with negative value and deadline integer with valid value. 
  Act: Invoke the 'of' method with the created parameters. 
  Assert: Use JUnit assertions to check if the returned Job object's processingTime is negative.
Validation: 
  The assertion aims to verify if the 'of' method correctly handles negative processingTime. The expected result is that the Job object's processingTime is negative. 
  The significance of this test is to ensure that the 'of' method can handle negative processingTime, which is important for the application's robustness.


Scenario 4: Validate Job Creation with Zero Deadline

Details:  
  TestName: validateJobCreationWithZeroDeadline
  Description: This test is meant to check if the 'of' method handles zero deadline correctly. 
Execution:
  Arrange: Create a jobName string, processingTime integer with valid values, and deadline with zero value. 
  Act: Invoke the 'of' method with the created parameters. 
  Assert: Use JUnit assertions to check if the returned Job object's deadline is zero.
Validation: 
  The assertion aims to verify if the 'of' method correctly handles zero deadline. The expected result is that the Job object's deadline is zero. 
  The significance of this test is to ensure that the 'of' method can handle zero deadline, which is important for the application's robustness.
"""
*/

// ********RoostGPT********
package com.thealgorithms.greedyalgorithms;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.Test;
import java.util.Arrays;

public class MinimizingLatenessOfTest {
    @Test
    public void validateJobCreationWithValidParameters() {
        String jobName = "Test Job";
        int processingTime = 5;
        int deadline = 10;
        Job job = Job.of(jobName, processingTime, deadline);
        assertEquals(jobName, job.getJobName());
        assertEquals(processingTime, job.getProcessingTime());
        assertEquals(deadline, job.getDeadline());
    }
    @Test
    public void validateJobCreationWithNullJobName() {
        String jobName = null;
        int processingTime = 5;
        int deadline = 10;
        Job job = Job.of(jobName, processingTime, deadline);
        assertNull(job.getJobName());
        assertEquals(processingTime, job.getProcessingTime());
        assertEquals(deadline, job.getDeadline());
    }
    @Test
    public void validateJobCreationWithNegativeProcessingTime() {
        String jobName = "Test Job";
        int processingTime = -5;
        int deadline = 10;
        Job job = Job.of(jobName, processingTime, deadline);
        assertEquals(jobName, job.getJobName());
        assertEquals(processingTime, job.getProcessingTime());
        assertEquals(deadline, job.getDeadline());
    }
    @Test
    public void validateJobCreationWithZeroDeadline() {
        String jobName = "Test Job";
        int processingTime = 5;
        int deadline = 0;
        Job job = Job.of(jobName, processingTime, deadline);
        assertEquals(jobName, job.getJobName());
        assertEquals(processingTime, job.getProcessingTime());
        assertEquals(deadline, job.getDeadline());
    }
}
