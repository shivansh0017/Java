// ********RoostGPT********
/*
Test generated by RoostGPT for test Java-repo-test using AI Type Open AI and AI Model gpt-4
ROOST_METHOD_HASH=toString_7033209074
ROOST_METHOD_SIG_HASH=toString_bbffdadaa2
"""
Scenario 1: Test when jobName, startTime, processingTime and lateness are all set to their default values
Details:
  TestName: testToStringWithDefaultValues
  Description: This test is meant to check the toString() method when jobName is null, startTime, processingTime and lateness are all zero.
Execution:
  Arrange: Set jobName to null, startTime, processingTime and lateness to zero.
  Act: Invoke the toString() method.
  Assert: Use JUnit assertions to compare actual results against expected outcomes.
Validation:
  The assertion aims to verify that the returned string is correct. It is expected to be "null, startTime: 0, endTime: 0, lateness: 0". This test is important to ensure that the method can handle default values correctly.
Scenario 2: Test when jobName is a non-empty string, startTime, processingTime and lateness are positive integers
Details:
  TestName: testToStringWithValidValues
  Description: This test is meant to check the toString() method when jobName is a non-empty string and startTime, processingTime and lateness are positive integers.
Execution:
  Arrange: Set jobName to a non-empty string, startTime, processingTime and lateness to positive integers.
  Act: Invoke the toString() method.
  Assert: Use JUnit assertions to compare actual results against expected outcomes.
Validation:
  The assertion aims to verify that the returned string is correct. The expected result should be a formatted string with the provided jobName, startTime, endTime (startTime + processingTime) and lateness. This test is important to ensure that the method can correctly format and return the job details.
Scenario 3: Test when jobName is a non-empty string containing special characters
Details:
  TestName: testToStringWithSpecialCharactersInJobName
  Description: This test is meant to check the toString() method when jobName is a non-empty string containing special characters.
Execution:
  Arrange: Set jobName to a non-empty string containing special characters.
  Act: Invoke the toString() method.
  Assert: Use JUnit assertions to compare actual results against expected outcomes.
Validation:
  The assertion aims to verify that the returned string is correct. The expected result should be a formatted string with the provided jobName (including special characters), startTime, endTime and lateness. This test is important to ensure that the method can handle special characters correctly.
Scenario 4: Test when startTime, processingTime and lateness are negative integers
Details:
  TestName: testToStringWithNegativeValues
  Description: This test is meant to check the toString() method when startTime, processingTime and lateness are negative integers.
Execution:
  Arrange: Set startTime, processingTime and lateness to negative integers.
  Act: Invoke the toString() method.
  Assert: Use JUnit assertions to compare actual results against expected outcomes.
Validation:
  The assertion aims to verify that the returned string is correct. The expected result should be a formatted string with the provided jobName, startTime, endTime (which is startTime + processingTime, and can be negative) and lateness (also negative). This test is important to ensure that the method can handle negative values correctly.
"""
*/
// ********RoostGPT********
package com.thealgorithms.greedyalgorithms;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.Arrays;
import org.junit.jupiter.api.*;

@Tag("com.thealgorithms.greedyalgorithms")
@Tag("com.thealgorithms.greedyalgorithms.toString")
public class MinimizingLatenessToStringTest {

	@Test
	public void testToStringWithDefaultValues() {
		Job job = new Job(null, 0, 0);
		String expected = "null, startTime: 0, endTime: 0, lateness: 0";
		assertEquals(expected, job.toString());
	}

	@Test
	public void testToStringWithValidValues() {
		Job job = new Job("Job1", 5, 10);
		job.startTime = 1;
		job.lateness = 2;
		String expected = "Job1, startTime: 1, endTime: 6, lateness: 2";
		assertEquals(expected, job.toString());
	}

	@Test
	public void testToStringWithSpecialCharactersInJobName() {
		Job job = new Job("Job#1", 5, 10);
		job.startTime = 1;
		job.lateness = 2;
		String expected = "Job#1, startTime: 1, endTime: 6, lateness: 2";
		assertEquals(expected, job.toString());
	}

	@Test
	public void testToStringWithNegativeValues() {
		Job job = new Job("Job1", -5, -10);
		job.startTime = -1;
		job.lateness = -2;
		String expected = "Job1, startTime: -1, endTime: -6, lateness: -2";
		assertEquals(expected, job.toString());
	}

}