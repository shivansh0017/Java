// ********RoostGPT********
/*
Test generated by RoostGPT for test Java-repo-Claude-test using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=toString_7033209074
ROOST_METHOD_SIG_HASH=toString_bbffdadaa2

Here are the JUnit test scenarios for the provided toString() method:

Scenario 1: Test toString() with valid job details

Details:
  TestName: toStringWithValidJobDetails()
  Description: This test checks if the toString() method returns the expected string representation when provided with valid job details.
Execution:
  Arrange:
    - Set jobName to a non-null value, e.g., "Job1"
    - Set startTime to a non-negative value, e.g., 10
    - Set processingTime to a non-negative value, e.g., 5
    - Set lateness to a non-negative value, e.g., 0
  Act:
    - Invoke the toString() method
  Assert:
    - Assert that the returned string matches the expected format: "Job1, startTime: 10, endTime: 15, lateness: 0"
Validation:
  The assertion verifies that the toString() method correctly formats the job details into the expected string representation. This test ensures that the method works as intended when provided with valid input values.

Scenario 2: Test toString() with null jobName

Details:
  TestName: toStringWithNullJobName()
  Description: This test checks if the toString() method handles a null jobName gracefully and returns the expected string representation.
Execution:
  Arrange:
    - Set jobName to null
    - Set startTime to a non-negative value, e.g., 10
    - Set processingTime to a non-negative value, e.g., 5
    - Set lateness to a non-negative value, e.g., 0
  Act:
    - Invoke the toString() method
  Assert:
    - Assert that the returned string matches the expected format: "null, startTime: 10, endTime: 15, lateness: 0"
Validation:
  The assertion verifies that the toString() method handles a null jobName correctly and includes "null" in the string representation. This test ensures that the method does not throw an exception and provides a meaningful output even when the jobName is null.

Scenario 3: Test toString() with negative startTime

Details:
  TestName: toStringWithNegativeStartTime()
  Description: This test checks if the toString() method handles a negative startTime correctly and returns the expected string representation.
Execution:
  Arrange:
    - Set jobName to a non-null value, e.g., "Job1"
    - Set startTime to a negative value, e.g., -5
    - Set processingTime to a non-negative value, e.g., 5
    - Set lateness to a non-negative value, e.g., 0
  Act:
    - Invoke the toString() method
  Assert:
    - Assert that the returned string matches the expected format: "Job1, startTime: -5, endTime: 0, lateness: 0"
Validation:
  The assertion verifies that the toString() method handles a negative startTime correctly and includes it in the string representation. This test ensures that the method does not throw an exception and provides a meaningful output even when the startTime is negative.

Scenario 4: Test toString() with large values

Details:
  TestName: toStringWithLargeValues()
  Description: This test checks if the toString() method handles large values for startTime, processingTime, and lateness correctly and returns the expected string representation.
Execution:
  Arrange:
    - Set jobName to a non-null value, e.g., "Job1"
    - Set startTime to a large positive value, e.g., Integer.MAX_VALUE
    - Set processingTime to a large positive value, e.g., Integer.MAX_VALUE
    - Set lateness to a large positive value, e.g., Integer.MAX_VALUE
  Act:
    - Invoke the toString() method
  Assert:
    - Assert that the returned string matches the expected format: "Job1, startTime: 2147483647, endTime: -2, lateness: 2147483647"
Validation:
  The assertion verifies that the toString() method handles large values correctly and includes them in the string representation. This test ensures that the method does not throw an exception and provides a meaningful output even when the values are extremely large.

These test scenarios cover different aspects of the toString() method, including valid job details, null jobName, negative startTime, and large values. They ensure that the method behaves as expected in various scenarios and provides meaningful string representations.
*/

// ********RoostGPT********
package com.thealgorithms.greedyalgorithms;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import java.util.stream.Stream;
import static org.assertj.core.api.Assertions.assertThat;
import java.util.Arrays;

class MinimizingLatenessToStringTest {
    @Test
    void toStringWithValidJobDetails() {
        // Arrange
        MinimizingLateness.Job job = new MinimizingLateness.Job("Job1", 5, 10);
        job.startTime = 10;
        job.lateness = 0;
        // Act
        String result = job.toString();
        // Assert
        assertThat(result).isEqualTo("Job1, startTime: 10, endTime: 15, lateness: 0");
    }
    
    @Test
    void toStringWithNullJobName() {
        // Arrange
        MinimizingLateness.Job job = new MinimizingLateness.Job(null, 5, 10);
        job.startTime = 10;
        job.lateness = 0;
        // Act
        String result = job.toString();
        // Assert
        assertThat(result).isEqualTo("null, startTime: 10, endTime: 15, lateness: 0");
    }
    
    @Test
    void toStringWithNegativeStartTime() {
        // Arrange
        MinimizingLateness.Job job = new MinimizingLateness.Job("Job1", 5, 10);
        job.startTime = -5;
        job.lateness = 0;
        // Act
        String result = job.toString();
        // Assert
        assertThat(result).isEqualTo("Job1, startTime: -5, endTime: 0, lateness: 0");
    }
    
    @ParameterizedTest
    @MethodSource("provideArgumentsForToStringWithLargeValues")
    void toStringWithLargeValues(String jobName, int startTime, int processingTime, int lateness, String expectedResult) {
        // Arrange
        MinimizingLateness.Job job = new MinimizingLateness.Job(jobName, processingTime, Integer.MAX_VALUE);
        job.startTime = startTime;
        job.lateness = lateness;
        // Act
        String result = job.toString();
        // Assert
        assertThat(result).isEqualTo(expectedResult);
    }
    
    private static Stream<Arguments> provideArgumentsForToStringWithLargeValues() {
        return Stream.of(
                Arguments.of("Job1", Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE,
                        "Job1, startTime: 2147483647, endTime: -2, lateness: 2147483647"),
                Arguments.of("Job2", Integer.MIN_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE,
                        "Job2, startTime: -2147483648, endTime: -1, lateness: 2147483647")
        );
    }
}
