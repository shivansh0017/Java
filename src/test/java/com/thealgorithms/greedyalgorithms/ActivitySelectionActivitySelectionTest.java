// ********RoostGPT********
/*
Test generated by RoostGPT for test Java-repo-test using AI Type Open AI and AI Model gpt-4
ROOST_METHOD_HASH=activitySelection_77631a6e2d
ROOST_METHOD_SIG_HASH=activitySelection_bf79d28a9f
"""
  Scenario 1: Test with valid start times and end times arrays
  Details:
    TestName: testActivitySelectionWithValidTimes
    Description: This test is meant to check the activitySelection method when provided with valid start times and end times. It verifies that the method correctly selects the activities that do not overlap and returns them in an ArrayList.
  Execution:
    Arrange: Create two arrays, one for start times and one for end times, which represent the start and end times of different activities.
    Act: Invoke the activitySelection method with the created start times and end times arrays.
    Assert: Use JUnit assertions to compare the actual returned ArrayList against the expected ArrayList of non-overlapping activities.
  Validation:
    This assertion verifies that the activitySelection method correctly selects the activities that do not overlap. The expected result is determined based on the known start and end times of the activities.
  Scenario 2: Test with empty start times and end times arrays
  Details:
    TestName: testActivitySelectionWithEmptyTimes
    Description: This test is meant to check the activitySelection method when provided with empty start times and end times arrays. It verifies that the method returns an empty ArrayList.
  Execution:
    Arrange: Create two empty arrays for start times and end times.
    Act: Invoke the activitySelection method with the created empty arrays.
    Assert: Use JUnit assertions to compare the actual returned ArrayList against an empty ArrayList.
  Validation:
    This assertion verifies that the activitySelection method correctly handles the case where there are no activities. The expected result is an empty ArrayList as there are no activities to select.
  Scenario 3: Test with overlapping activities
  Details:
    TestName: testActivitySelectionWithOverlappingActivities
    Description: This test is meant to check the activitySelection method when provided with start times and end times that result in overlapping activities. It verifies that the method correctly selects the maximum number of non-overlapping activities.
  Execution:
    Arrange: Create two arrays for start times and end times, such that some activities overlap.
    Act: Invoke the activitySelection method with the created start times and end times arrays.
    Assert: Use JUnit assertions to compare the actual returned ArrayList against the expected ArrayList of non-overlapping activities.
  Validation:
    This assertion verifies that the activitySelection method correctly selects the maximum number of non-overlapping activities when there are overlapping activities. The expected result is determined based on the known start and end times of the activities.

  Scenario 4: Test with null start times and end times arrays
  Details:
    TestName: testActivitySelectionWithNullTimes
    Description: This test is meant to check the activitySelection method when provided with null for start times and end times arrays. It should throw a NullPointerException.
  Execution:
    Arrange: No need to arrange anything as we are passing null values.
    Act: Invoke the activitySelection method with null values for start times and end times arrays.
    Assert: Use JUnit assertions to expect a NullPointerException.
  Validation:
    This assertion verifies that the activitySelection method correctly throws a NullPointerException when provided with null values for start times and end times arrays. The expected result is a NullPointerException.
"""
*/
// ********RoostGPT********
package com.thealgorithms.greedyalgorithms;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import org.junit.jupiter.api.*;

@Tag("com.thealgorithms.sorts")
@Tag("com.thealgorithms.sorts.sort")
@Tag("com.thealgorithms.datastructures.bags")
@Tag("com.thealgorithms.datastructures.bags.add")
@Tag("com.thealgorithms.datastructures.bags.add")
@Tag("com.thealgorithms.greedyalgorithms")
@Tag("com.thealgorithms.greedyalgorithms.activitySelection")
public class ActivitySelectionActivitySelectionTest {

	@Test
	public void testActivitySelectionWithValidTimes() {
		int[] startTimes = { 1, 3, 0, 5, 8, 5 };
		int[] endTimes = { 2, 4, 6, 7, 9, 9 };
		ArrayList<Integer> expectedOutput = new ArrayList<>(Arrays.asList(0, 1, 3, 4));
		Assertions.assertEquals(expectedOutput, ActivitySelection.activitySelection(startTimes, endTimes));
	}

	@Test
	public void testActivitySelectionWithEmptyTimes() {
		int[] startTimes = {};
		int[] endTimes = {};
		ArrayList<Integer> expectedOutput = new ArrayList<>();
		Assertions.assertEquals(expectedOutput, ActivitySelection.activitySelection(startTimes, endTimes));
	}

	@Test
	public void testActivitySelectionWithOverlappingActivities() {
		int[] startTimes = { 1, 3, 0, 5, 8, 5 };
		int[] endTimes = { 2, 4, 6, 10, 9, 7 };
		ArrayList<Integer> expectedOutput = new ArrayList<>(Arrays.asList(0, 1, 3));
		Assertions.assertEquals(expectedOutput, ActivitySelection.activitySelection(startTimes, endTimes));
	}

	@Test
	public void testActivitySelectionWithNullTimes() {
		int[] startTimes = null;
		int[] endTimes = null;
		Assertions.assertThrows(NullPointerException.class,
				() -> ActivitySelection.activitySelection(startTimes, endTimes));
	}

}