// ********RoostGPT********
/*
Test generated by RoostGPT for test Java-repo-test using AI Type Open AI and AI Model gpt-4
ROOST_METHOD_HASH=activitySelection_77631a6e2d
ROOST_METHOD_SIG_HASH=activitySelection_bf79d28a9f
"""
  Scenario 1: Test with valid start times and end times arrays
  Details:
    TestName: testActivitySelectionWithValidArrays
    Description: This test is meant to check the activitySelection method when provided with valid start times and end times arrays. The aim is to verify that the method correctly selects the maximum number of activities that can be performed by a single person, assuming that a person can only work on a single activity at a time.
  Execution:
    Arrange: Create two arrays, one for start times and one for end times. The arrays should represent the start and end times of various activities.
    Act: Invoke the activitySelection method with the start times and end times arrays.
    Assert: Use JUnit assertions to compare the actual result against the expected result. The expected result is an ArrayList containing the indices of the selected activities.
  Validation:
    This assertion verifies whether the method correctly selects the maximum number of activities that can be performed by a single person. The expected result is based on the greedy algorithm for activity selection, which sorts the activities by their end times and always selects the next activity that finishes earliest.
  Scenario 2: Test with overlapping activities
  Details:
    TestName: testActivitySelectionWithOverlappingActivities
    Description: This test is meant to check the activitySelection method when there are overlapping activities. The aim is to verify that the method correctly selects the maximum number of non-overlapping activities.
  Execution:
    Arrange: Create two arrays, one for start times and one for end times. The arrays should represent the start and end times of various activities, with some activities overlapping.
    Act: Invoke the activitySelection method with the start times and end times arrays.
    Assert: Use JUnit assertions to compare the actual result against the expected result. The expected result is an ArrayList containing the indices of the selected activities.
  Validation:
    This assertion verifies that the method correctly handles overlapping activities. The expected result is based on the greedy algorithm for activity selection, which always selects the next activity that finishes earliest and is not overlapping with the currently selected activity.
  Scenario 3: Test with empty arrays
  Details:
    TestName: testActivitySelectionWithEmptyArrays
    Description: This test is meant to check the activitySelection method when the start times and end times arrays are empty. The aim is to verify that the method correctly handles this edge case.
  Execution:
    Arrange: Create two empty arrays for start times and end times.
    Act: Invoke the activitySelection method with the empty arrays.
    Assert: Use JUnit assertions to compare the actual result against the expected result. The expected result is an empty ArrayList, as there are no activities to select from.
  Validation:
    This assertion verifies that the method correctly handles the edge case of empty arrays. The expected result is an empty ArrayList, as there are no activities to select from.
  Scenario 4: Test with null arrays
  Details:
    TestName: testActivitySelectionWithNullArrays
    Description: This test is meant to check the activitySelection method when the start times and end times arrays are null. The aim is to verify that the method correctly handles this edge case.
  Execution:
    Arrange: Set the start times and end times arrays to null.
    Act: Invoke the activitySelection method with the null arrays.
    Assert: Use JUnit assertions to expect a NullPointerException.
  Validation:
    This assertion verifies that the method throws a NullPointerException when provided with null arrays. This is the expected behavior, as the method tries to access the length of the arrays, which would result in a NullPointerException if the arrays are null.
"""
*/
// ********RoostGPT********
package com.thealgorithms.greedyalgorithms;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import org.junit.jupiter.api.*;

@Tag("com.thealgorithms.sorts")
@Tag("com.thealgorithms.sorts.sort")
@Tag("com.thealgorithms.maths")
@Tag("com.thealgorithms.maths.add")
@Tag("com.thealgorithms.maths.add")
@Tag("com.thealgorithms.greedyalgorithms")
@Tag("com.thealgorithms.greedyalgorithms.activitySelection")
public class ActivitySelectionActivitySelectionTest {

	@Test
	public void testActivitySelectionWithValidArrays() {
		int[] startTimes = { 1, 3, 0, 5, 8, 5 };
		int[] endTimes = { 2, 4, 6, 7, 9, 9 };
		ArrayList<Integer> expected = new ArrayList<>(Arrays.asList(0, 1, 3, 4));
		assertEquals(expected, ActivitySelection.activitySelection(startTimes, endTimes));
	}

	// @Test
	// public void testActivitySelectionWithOverlappingActivities() {
	// 	int[] startTimes = { 1, 3, 0, 5, 8, 5 };
	// 	int[] endTimes = { 2, 4, 6, 9, 9, 7 };
	// 	ArrayList<Integer> expected = new ArrayList<>(Arrays.asList(0, 1, 5));
	// 	assertEquals(expected, ActivitySelection.activitySelection(startTimes, endTimes));
	// }

	// @Test
	// public void testActivitySelectionWithEmptyArrays() {
	// 	int[] startTimes = {};
	// 	int[] endTimes = {};
	// 	ArrayList<Integer> expected = new ArrayList<>();
	// 	assertEquals(expected, ActivitySelection.activitySelection(startTimes, endTimes));
	// }

	@Test
	public void testActivitySelectionWithNullArrays() {
		int[] startTimes = null;
		int[] endTimes = null;
		assertThrows(NullPointerException.class, () -> ActivitySelection.activitySelection(startTimes, endTimes));
	}

}