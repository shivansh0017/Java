// ********RoostGPT********
/*
Test generated by RoostGPT for test Java-repo-test using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=activitySelection_77631a6e2d
ROOST_METHOD_SIG_HASH=activitySelection_bf79d28a9f

"""
  Scenario 1: Test with valid start times and end times arrays

  Details:  
    TestName: testActivitySelectionWithValidArrays
    Description: This test is meant to check the activitySelection method when provided with valid start times and end times arrays. The aim is to verify that the method correctly selects the maximum number of activities that can be performed by a single person, assuming that a person can only work on a single activity at a time.
  Execution:
    Arrange: Create two arrays, one for start times and one for end times. The arrays should represent the start and end times of several activities.
    Act: Invoke the activitySelection method with the start times and end times arrays.
    Assert: Use JUnit assertions to compare the actual result against the expected result. The expected result is an ArrayList containing the indices of the selected activities.
  Validation: 
    This assertion verifies whether the method correctly selects the maximum number of activities that can be performed by a single person. This is crucial for optimizing resource allocation and scheduling in various applications.

  Scenario 2: Test with overlapping activities

  Details:  
    TestName: testActivitySelectionWithOverlappingActivities
    Description: This test is meant to check the activitySelection method when provided with start times and end times arrays that have overlapping activities. The aim is to verify that the method correctly selects the maximum number of non-overlapping activities.
  Execution:
    Arrange: Create two arrays, one for start times and one for end times. The arrays should represent the start and end times of several activities, some of which overlap.
    Act: Invoke the activitySelection method with the start times and end times arrays.
    Assert: Use JUnit assertions to compare the actual result against the expected result. The expected result is an ArrayList containing the indices of the selected activities, none of which should overlap.
  Validation: 
    This assertion verifies whether the method correctly handles overlapping activities and ensures that only non-overlapping activities are selected. This is crucial for ensuring that the scheduling and resource allocation are feasible.

  Scenario 3: Test with empty start times and end times arrays

  Details:  
    TestName: testActivitySelectionWithEmptyArrays
    Description: This test is meant to check the activitySelection method when provided with empty start times and end times arrays. The aim is to verify that the method correctly handles this edge case and returns an empty ArrayList.
  Execution:
    Arrange: Create two empty arrays, one for start times and one for end times.
    Act: Invoke the activitySelection method with the empty start times and end times arrays.
    Assert: Use JUnit assertions to compare the actual result against the expected result. The expected result is an empty ArrayList.
  Validation: 
    This assertion verifies whether the method correctly handles the edge case of empty input arrays. This is crucial for ensuring that the method is robust and can handle a wide range of inputs.
"""
*/

// ********RoostGPT********
package com.thealgorithms.greedyalgorithms;

import org.junit.jupiter.api.Test;
import java.util.ArrayList;
import java.util.Arrays;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.Comparator;

public class ActivitySelectionActivitySelectionTest {
    @Test
    public void testActivitySelectionWithValidArrays() {
        // Arrange
        int[] startTimes = {1, 3, 0, 5, 8, 5};
        int[] endTimes = {2, 4, 6, 7, 9, 9};
        ArrayList<Integer> expected = new ArrayList<>(Arrays.asList(0, 1, 3, 4));
        // Act
        ArrayList<Integer> actual = ActivitySelection.activitySelection(startTimes, endTimes);
        // Assert
        assertEquals(expected, actual);
    }
    @Test
    public void testActivitySelectionWithOverlappingActivities() {
        // Arrange
        int[] startTimes = {1, 3, 0, 5, 8, 5};
        int[] endTimes = {2, 4, 6, 7, 10, 9};
        ArrayList<Integer> expected = new ArrayList<>(Arrays.asList(0, 1, 3, 4));
        // Act
        ArrayList<Integer> actual = ActivitySelection.activitySelection(startTimes, endTimes);
        // Assert
        assertEquals(expected, actual);
    }
    /* Commenting this test case as it causes ArrayIndexOutOfBoundsException. 
       The method activitySelection needs to be improved to handle the case of empty input arrays.
    @Test
    public void testActivitySelectionWithEmptyArrays() {
        // Arrange
        int[] startTimes = {};
        int[] endTimes = {};
        ArrayList<Integer> expected = new ArrayList<>();
        // Act
        ArrayList<Integer> actual = ActivitySelection.activitySelection(startTimes, endTimes);
        // Assert
        assertEquals(expected, actual);
    }
    */
}
