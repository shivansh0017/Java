// ********RoostGPT********
/*
Test generated by RoostGPT for test Java-repo-Claude-test using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=activitySelection_77631a6e2d
ROOST_METHOD_SIG_HASH=activitySelection_bf79d28a9f

Here are the JUnit test scenarios for the provided `activitySelection` method:

Scenario 1: Test with valid input and multiple compatible activities

Details:
  TestName: validInputMultipleCompatibleActivities
  Description: This test verifies that the method correctly selects compatible activities when provided with valid start and end times, and there are multiple compatible activities.
Execution:
  Arrange: 
    - Create an array of start times: [1, 3, 0, 5, 8, 5]
    - Create an array of end times: [2, 4, 6, 7, 9, 9]
  Act: 
    - Call the `activitySelection` method with the start and end times arrays.
  Assert:
    - Assert that the returned `ArrayList` contains the expected activity indices: [0, 1, 3, 4]
Validation:
  The assertion verifies that the method correctly identifies and returns the indices of compatible activities. The expected result is based on the given start and end times, where activities 0, 1, 3, and 4 can be performed without overlapping.

Scenario 2: Test with valid input and no compatible activities

Details:
  TestName: validInputNoCompatibleActivities
  Description: This test checks that the method returns only the first activity when provided with valid start and end times, but there are no compatible activities after the first one.
Execution:
  Arrange:
    - Create an array of start times: [1, 2, 3, 4, 5]
    - Create an array of end times: [2, 3, 4, 5, 6]
  Act:
    - Call the `activitySelection` method with the start and end times arrays.
  Assert:
    - Assert that the returned `ArrayList` contains only the first activity index: [0]
Validation:
  The assertion verifies that when there are no compatible activities after the first one, the method correctly returns only the first activity index. This is important to ensure that the method handles scenarios where no additional activities can be selected.

Scenario 3: Test with empty input arrays

Details:
  TestName: emptyInputArrays
  Description: This test verifies that the method handles empty input arrays gracefully and returns an empty `ArrayList`.
Execution:
  Arrange:
    - Create empty arrays for start times and end times.
  Act:
    - Call the `activitySelection` method with the empty arrays.
  Assert:
    - Assert that the returned `ArrayList` is empty.
Validation:
  The assertion checks that when provided with empty input arrays, the method correctly returns an empty `ArrayList`. This test ensures that the method does not throw any exceptions and handles the case of no activities gracefully.

Scenario 4: Test with input arrays of different lengths

Details:
  TestName: inputArraysDifferentLengths
  Description: This test verifies that the method throws an appropriate exception when provided with start and end times arrays of different lengths.
Execution:
  Arrange:
    - Create an array of start times with a different length than the end times array.
  Act:
    - Call the `activitySelection` method with the mismatched arrays.
  Assert:
    - Assert that an `IllegalArgumentException` is thrown.
Validation:
  The assertion checks that the method throws an `IllegalArgumentException` when the input arrays have different lengths. This test ensures that the method validates the input and handles the case of mismatched array lengths appropriately, preventing unexpected behavior.

Scenario 5: Test with input arrays containing negative values

Details:
  TestName: inputArraysWithNegativeValues
  Description: This test verifies that the method handles input arrays containing negative values correctly and selects compatible activities based on the provided times.
Execution:
  Arrange:
    - Create an array of start times with negative values: [-4, -2, 0, 1, 3]
    - Create an array of end times with negative values: [-3, -1, 2, 4, 5]
  Act:
    - Call the `activitySelection` method with the arrays containing negative values.
  Assert:
    - Assert that the returned `ArrayList` contains the expected activity indices: [0, 1, 2, 4]
Validation:
  The assertion verifies that the method correctly handles negative values in the input arrays and selects compatible activities based on the provided start and end times. This test ensures that the method's logic is not affected by the presence of negative values and works as expected.

These test scenarios cover different aspects of the `activitySelection` method, including valid inputs, edge cases, and error handling. They ensure that the method behaves correctly under various conditions and provides the expected results.
*/

// ********RoostGPT********
package com.thealgorithms.greedyalgorithms;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Assertions;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;

public class ActivitySelectionActivitySelectionTest {
    
    @Test
    public void validInputMultipleCompatibleActivities() {
        int[] startTimes = {1, 3, 0, 5, 8, 5};
        int[] endTimes = {2, 4, 6, 7, 9, 9};
        
        ArrayList<Integer> expected = new ArrayList<>(Arrays.asList(0, 1, 3, 4));
        ArrayList<Integer> result = ActivitySelection.activitySelection(startTimes, endTimes);
        
        Assertions.assertEquals(expected, result);
    }
    
    @Test
    public void validInputNoCompatibleActivities() {
        int[] startTimes = {1, 2, 3, 4, 5};
        int[] endTimes = {2, 3, 4, 5, 6};
        
        ArrayList<Integer> expected = new ArrayList<>(Arrays.asList(0));
        ArrayList<Integer> result = ActivitySelection.activitySelection(startTimes, endTimes);
        
        Assertions.assertEquals(expected, result);
    }
    
    @Test
    public void emptyInputArrays() {
        int[] startTimes = {};
        int[] endTimes = {};
        
        ArrayList<Integer> expected = new ArrayList<>();
        ArrayList<Integer> result = ActivitySelection.activitySelection(startTimes, endTimes);
        
        Assertions.assertEquals(expected, result);
    }
    
    @Test
    public void inputArraysDifferentLengths() {
        int[] startTimes = {1, 2, 3};
        int[] endTimes = {2, 3, 4, 5};
        
        Assertions.assertThrows(IllegalArgumentException.class, () -> {
            ActivitySelection.activitySelection(startTimes, endTimes);
        });
    }
    
    @Test
    public void inputArraysWithNegativeValues() {
        int[] startTimes = {-4, -2, 0, 1, 3};
        int[] endTimes = {-3, -1, 2, 4, 5};
        
        ArrayList<Integer> expected = new ArrayList<>(Arrays.asList(0, 1, 2, 4));
        ArrayList<Integer> result = ActivitySelection.activitySelection(startTimes, endTimes);
        
        Assertions.assertEquals(expected, result);
    }
    
    // Additional test case for single activity
    @Test
    public void validInputSingleActivity() {
        int[] startTimes = {5};
        int[] endTimes = {7};
        
        ArrayList<Integer> expected = new ArrayList<>(Arrays.asList(0));
        ArrayList<Integer> result = ActivitySelection.activitySelection(startTimes, endTimes);
        
        Assertions.assertEquals(expected, result);
    }
    
    // Additional test case for activities with same start and end times
    @Test
    public void validInputActivitiesWithSameStartAndEndTimes() {
        int[] startTimes = {1, 2, 2, 3};
        int[] endTimes = {4, 4, 5, 5};
        
        ArrayList<Integer> expected = new ArrayList<>(Arrays.asList(0, 2));
        ArrayList<Integer> result = ActivitySelection.activitySelection(startTimes, endTimes);
        
        Assertions.assertEquals(expected, result);
    }
}
