// ********RoostGPT********
/*
Test generated by RoostGPT for test Java-repo-test using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=compareTo_c1bf9e4150
ROOST_METHOD_SIG_HASH=compareTo_de6640218f

"""
  Scenario 1: Comparing Two Jobs with Equal Profit

  Details:  
    TestName: compareEqualProfits.
    Description: This test is meant to check if the compareTo method can correctly handle the scenario where two jobs have the same profit. Since the profits are the same, the method should return 0. 
  Execution:
    Arrange: Create two Job instances with the same profit.
    Act: Invoke the compareTo method on the first Job instance, passing in the second Job instance.
    Assert: Confirm that the result of the compareTo method is 0.
  Validation: 
    This assertion verifies that the compareTo method correctly handles the case where two jobs have the same profit. This is important as it ensures that the job sorting algorithm works correctly even when jobs have equal profits.

  Scenario 2: Comparing Two Jobs where the First Job has a Higher Profit

  Details:  
    TestName: compareFirstJobHigherProfit.
    Description: This test is meant to check if the compareTo method can correctly handle the scenario where the first job has a higher profit than the second job. In this case, the method should return a negative value. 
  Execution:
    Arrange: Create two Job instances, where the first job has a higher profit than the second job.
    Act: Invoke the compareTo method on the first Job instance, passing in the second Job instance.
    Assert: Confirm that the result of the compareTo method is a negative value.
  Validation: 
    This assertion verifies that the compareTo method correctly handles the case where the first job has a higher profit than the second job. This is important as it ensures that the job sorting algorithm can correctly order jobs based on their profit.

  Scenario 3: Comparing Two Jobs where the Second Job has a Higher Profit

  Details:  
    TestName: compareSecondJobHigherProfit.
    Description: This test is meant to check if the compareTo method can correctly handle the scenario where the second job has a higher profit than the first job. In this case, the method should return a positive value. 
  Execution:
    Arrange: Create two Job instances, where the second job has a higher profit than the first job.
    Act: Invoke the compareTo method on the first Job instance, passing in the second Job instance.
    Assert: Confirm that the result of the compareTo method is a positive value.
  Validation: 
    This assertion verifies that the compareTo method correctly handles the case where the second job has a higher profit than the first job. This is important as it ensures that the job sorting algorithm can correctly order jobs based on their profit.

  Scenario 4: Comparing a Job with Null

  Details:  
    TestName: compareJobWithNull.
    Description: This test is meant to check if the compareTo method can correctly handle the scenario where it is comparing a job with null. In this case, the method should throw a NullPointerException.
  Execution:
    Arrange: Create a Job instance.
    Act: Invoke the compareTo method on the Job instance, passing in null.
    Assert: Confirm that a NullPointerException is thrown.
  Validation: 
    This assertion verifies that the compareTo method correctly handles the case where it is comparing a job with null. This is important as it ensures that the job sorting algorithm can handle null values correctly.
"""
*/

// ********RoostGPT********
package com.thealgorithms.greedyalgorithms;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import org.junit.jupiter.api.Test;
import java.util.ArrayList;
import java.util.Arrays;

public class JobSequencingCompareToTest {
    
    @Test
    public void compareEqualProfits() {
        // Arrange
        Job job1 = new Job();
        job1.id = 'A';
        job1.deadline = 3;
        job1.profit = 100;
        
        Job job2 = new Job();
        job2.id = 'B';
        job2.deadline = 1;
        job2.profit = 100;
        
        // Act
        int result = job1.compareTo(job2);
        
        // Assert
        assertEquals(0, result);
    }
    
    @Test
    public void compareFirstJobHigherProfit() {
        // Arrange
        Job job1 = new Job();
        job1.id = 'A';
        job1.deadline = 3;
        job1.profit = 200;
        
        Job job2 = new Job();
        job2.id = 'B';
        job2.deadline = 1;
        job2.profit = 100;
        
        // Act
        int result = job1.compareTo(job2);
        
        // Assert
        assertEquals(1, result);
    }
    
    @Test
    public void compareSecondJobHigherProfit() {
        // Arrange
        Job job1 = new Job();
        job1.id = 'A';
        job1.deadline = 3;
        job1.profit = 100;
        
        Job job2 = new Job();
        job2.id = 'B';
        job2.deadline = 1;
        job2.profit = 200;
        
        // Act
        int result = job1.compareTo(job2);
        
        // Assert
        assertEquals(-1, result);
    }
    
    @Test
    public void compareJobWithNull() {
        // Arrange
        Job job1 = new Job();
        job1.id = 'A';
        job1.deadline = 3;
        job1.profit = 100;
        
        // Act & Assert
        assertThrows(NullPointerException.class, () -> job1.compareTo(null));
    }
}
