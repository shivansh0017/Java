// ********RoostGPT********
/*
Test generated by RoostGPT for test Java-repo-Azure-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=compareTo_c1bf9e4150
ROOST_METHOD_SIG_HASH=compareTo_de6640218f

"""
Scenario 1: Positive Test - Jobs Same Profit

Details:
  TestName: compareSameProfitJobs
  Description: The test is meant to check the functionality of the compareTo method when two jobs have the same profit. The target scenario is to ensure the method works as expected in ideal conditions i.e., no null values, no exceptions, etc.
Execution:
  Arrange: Create two job objects with the same profit.
  Act: Invoke the compareTo method on one job object, passing the other job object as a parameter.
  Assert: Use JUnit's assertEquals method to assert that the returned value is 0.
Validation: The assertion verifies that the compareTo method correctly identifies jobs with the same profit. The expected result is 0, as the method should subtract the profit of both jobs, which, in this case, are equal. This tests the functionality of the method in maintaining the integrity of the job prioritization logic.

Scenario 2: Positive Test - Jobs Different Profit

Details:
  TestName: compareDifferentProfitJobs
  Description: The test is meant to check the functionality of the compareTo method when two jobs have different profits. The target scenario is to ensure that the method correctly identifies and prioritizes the job with higher profit.
Execution:
  Arrange: Create two job objects with different profits.
  Act: Invoke the compareTo method on the job with lower profit, passing the job with higher profit as a parameter.
  Assert: Use JUnit's assertTrue method to assert the returned value is greater than 0.
Validation: The assertion verifies that the compareTo method correctly identifies and prioritizes jobs with higher profit. The expected result is a positive integer, as the method should return a positive number when the job has less profit than the job it is compared with. This scenario tests critical functionality of the job prioritization logic.

Scenario 3: Negative Test - Null Job Passed as Parameter

Details:
  TestName: compareWithNullJob
  Description: The test is to check that the compareTo method can handle null values gracefully. The target scenario is passing a null object to the method.
Execution:
  Arrange: Create a job object.
  Act: Invoke the compareTo method on the job object, passing null as a parameter.
  Assert: Use JUnit's assertThrows method to check that a NullPointerException is thrown.
Validation: The assertion verifies that the compareTo method throws a NullPointerException when a null object is passed as a parameter. The expected result is the exception, as the method should not be capable of handling null values without throwing an exception. This scenario tests the robustness of the method against invalid inputs.
"""
*/

// ********RoostGPT********
package com.thealgorithms.greedyalgorithms;

import java.util.ArrayList;
import java.util.Arrays;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class JobSequencingCompareToTest {
    Job job1, job2;

    @BeforeEach
    public void setUp() {
        job1 = null;
        job2 = null;
    }

    @Test
    public void compareSameProfitJobs() {
        job1 = new Job('A', 2, 100);
        job2 = new Job('B', 1, 100);
        assertEquals(0, job1.compareTo(job2));
    }

    @Test
    public void compareDifferentProfitJobs() {
        job1 = new Job('A', 2, 100);
        job2 = new Job('B', 1, 150);
        assertTrue(job1.compareTo(job2) > 0);
    }

    @Test
    public void compareWithNullJob() {
        job1 = new Job('A', 2, 100);
        assertThrows(NullPointerException.class, () -> job1.compareTo(null));
    }
}
