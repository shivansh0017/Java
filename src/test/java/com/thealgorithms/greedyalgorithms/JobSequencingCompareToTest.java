// ********RoostGPT********
/*
Test generated by RoostGPT for test Java-repo-test using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=compareTo_c1bf9e4150
ROOST_METHOD_SIG_HASH=compareTo_de6640218f

"""
  Scenario 1: Comparing Two Jobs with Equal Profit

  Details:  
    TestName: compareEqualProfits.
    Description: This test is meant to check if the compareTo method can correctly compare two jobs with the same profit. The expected result is 0, indicating that the jobs are equal in terms of profit.
  Execution:
    Arrange: Create two Job instances with the same profit.
    Act: Invoke the compareTo method on the first Job instance, passing in the second Job instance.
    Assert: Assert that the result of the compareTo method is 0.
  Validation: 
    This assertion verifies that the compareTo method correctly handles the case where two jobs have the same profit. This is important for ensuring that the job comparison functionality works correctly.

  Scenario 2: Comparing Two Jobs with Different Profits

  Details:  
    TestName: compareDifferentProfits.
    Description: This test is meant to check if the compareTo method can correctly compare two jobs with different profits. The expected result is the difference between the profits of the second and the first job.
  Execution:
    Arrange: Create two Job instances with different profits.
    Act: Invoke the compareTo method on the first Job instance, passing in the second Job instance.
    Assert: Assert that the result of the compareTo method is the difference between the profits of the second and the first job.
  Validation: 
    This assertion verifies that the compareTo method correctly handles the case where two jobs have different profits. This is crucial for sorting jobs based on their profits.

  Scenario 3: Comparing a Job with a Null Job

  Details:  
    TestName: compareToWithNullJob.
    Description: This test is meant to check if the compareTo method can handle a null job. An exception is expected in this scenario.
  Execution:
    Arrange: Create a Job instance.
    Act: Invoke the compareTo method on the Job instance, passing in null.
    Assert: Assert that an exception is thrown.
  Validation: 
    This assertion verifies that the compareTo method correctly handles the case where a null job is passed in. This is essential for error handling and preventing null pointer exceptions.
"""
*/

// ********RoostGPT********
package com.thealgorithms.greedyalgorithms;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import java.util.ArrayList;
import java.util.Arrays;

public class JobSequencingCompareToTest {
    @Test
    public void compareEqualProfits() {
        Job job1 = new Job();
        job1.id = 'A';
        job1.deadline = 1;
        job1.profit = 100;
        Job job2 = new Job();
        job2.id = 'B';
        job2.deadline = 2;
        job2.profit = 100;
        assertEquals(0, job1.compareTo(job2), "The compareTo method failed to correctly compare two jobs with equal profits");
    }

    @Test
    public void compareDifferentProfits() {
        Job job1 = new Job();
        job1.id = 'A';
        job1.deadline = 1;
        job1.profit = 100;
        Job job2 = new Job();
        job2.id = 'B';
        job2.deadline = 2;
        job2.profit = 150;
        assertEquals(-50, job1.compareTo(job2), "The compareTo method failed to correctly compare two jobs with different profits");
    }

    @Test
    public void compareToWithNullJob() {
        Job job1 = new Job();
        job1.id = 'A';
        job1.deadline = 1;
        job1.profit = 100;
        assertThrows(NullPointerException.class, () -> job1.compareTo(null), "The compareTo method failed to throw an exception when comparing with a null job");
    }
}
